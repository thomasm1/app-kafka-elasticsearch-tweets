
docker system df
docker rmi jenkins/jenkins
docker rmi httpd:2-alpine
docker images

docker run -dit redis
docker ps
docker run -dit --name redis_container redis # NOTE: You can also use the "--name=CONTAINER_NAME" syntax.
docker ps
docker stop redis_container
docker ps
docker run --rm hello-world
docker ps -a
docker run hello-world
docker ps -a

docker logs CONTAINER_NAME
docker run --name test_container -d hello-world
docker ps
docker ps -a
docker logs test_container
docker logs -t test_container # -f test_container

docker volume create localvolume
docker volume ls
docker volume inspect localvolume
echo "This file exists" > /var/lib/docker/volumes/localvolume/_data/file.txt
docker run -d --name mountvolume --mount src=localvolume,dst=/data httpd
docker exec -it mountvolume /bin/bash
df -h
cat /data/file.txt
echo "Created from inside the container" > /data/from-container.txt
cat /data/from-container.txt
exit
cat /var/lib/docker/volumes/localvolume/_data/from-container.txt
docker run -d --name tempvolume --mount type=tmpfs,dst=/tempdata httpd
docker inspect tempvolume | grep Mounts -A 10
docker exec -it tempvolume /bin/bash
df -h
exit


docker network create drupy
docker volume create db
POSTGRES_USER=drupy
POSTGRES_PASSWORD=pw123
POSTGRES_DB=drupy #  https://hub.docker.com/_/postgres
docker run -d --network drupy --name db -e POSTGRES_DB=drupy
-e POSTGRES_USER=drupy -e POSTGRES_PASSWORD=pw123
--mount src=db,dst=/var/lib/postgresql/data postgres:11.5
Inspect the "drupy" network to make sure the container is attached to it. You should see the "db"
container listed in the "Containers" section of the output.
docker network inspect drupy
docker run -d --network drupy --name drupy -p 80:80 drupy:8.7.7
docker network inspect drupy
ip a
Choose Language: English
Choose Profile: Standard
Set up Database:
Select "PostgreSQL"
Database name: drupy
Database username: drupy
Database password: pw123
Click "Advanced Options."
Host: db
Port number: 5432
Configure Site:
Site name: Test
Site email address: root@localhost.localdomain
Username: admin
Password: admin123
Confirm Password: admin123
Click "Save and continue".
docker volume create registry
docker run -d --name registry --mount src=registry,dst=/var/lib/registry
-p 5000:5000 registry:2 # NOTE: You can also use the "--publish=5000:5000" syntax.
#https://hub.docker.com/_/registry.)


docker pull nginx:latest
docker tag nginx:latest localhost:5000/nginx:latest
docker images
Push the retagged nginx image into the private registry.
docker push localhost:5000/nginx:latest
(For details on the API, see https://docs.docker.com/registry/spec/api/.)
curl http://localhost:5000/v2/_catalog
You should see "nginx" listed as a repository.
{"repositories":["nginx"]}
docker rmi nginx:latest
docker images
docker rmi localhost:5000/nginx:latest
docker images
docker pull localhost:5000/nginx
docker images
docker run -d localhost:5000/nginx
docker ps
ip a